
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model TaskResult
 * 
 */
export type TaskResult = $Result.DefaultSelection<Prisma.$TaskResultPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TaskResults
 * const taskResults = await prisma.taskResult.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TaskResults
   * const taskResults = await prisma.taskResult.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.taskResult`: Exposes CRUD operations for the **TaskResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskResults
    * const taskResults = await prisma.taskResult.findMany()
    * ```
    */
  get taskResult(): Prisma.TaskResultDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    TaskResult: 'TaskResult'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "taskResult"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      TaskResult: {
        payload: Prisma.$TaskResultPayload<ExtArgs>
        fields: Prisma.TaskResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          findFirst: {
            args: Prisma.TaskResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          findMany: {
            args: Prisma.TaskResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>[]
          }
          create: {
            args: Prisma.TaskResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          createMany: {
            args: Prisma.TaskResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>[]
          }
          delete: {
            args: Prisma.TaskResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          update: {
            args: Prisma.TaskResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          deleteMany: {
            args: Prisma.TaskResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>[]
          }
          upsert: {
            args: Prisma.TaskResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          aggregate: {
            args: Prisma.TaskResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskResult>
          }
          groupBy: {
            args: Prisma.TaskResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskResultCountArgs<ExtArgs>
            result: $Utils.Optional<TaskResultCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    taskResult?: TaskResultOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model TaskResult
   */

  export type AggregateTaskResult = {
    _count: TaskResultCountAggregateOutputType | null
    _avg: TaskResultAvgAggregateOutputType | null
    _sum: TaskResultSumAggregateOutputType | null
    _min: TaskResultMinAggregateOutputType | null
    _max: TaskResultMaxAggregateOutputType | null
  }

  export type TaskResultAvgAggregateOutputType = {
    id: number | null
    userClass: number | null
    correctAns: number | null
    totalAns: number | null
  }

  export type TaskResultSumAggregateOutputType = {
    id: number | null
    userClass: number | null
    correctAns: number | null
    totalAns: number | null
  }

  export type TaskResultMinAggregateOutputType = {
    id: number | null
    userClass: number | null
    lang: boolean | null
    math: boolean | null
    C1: boolean | null
    C2: boolean | null
    C3: boolean | null
    C4: boolean | null
    C5: boolean | null
    C6: boolean | null
    C7: boolean | null
    C8: boolean | null
    C9: boolean | null
    C10: boolean | null
    C11: boolean | null
    C12: boolean | null
    C13: boolean | null
    C14: boolean | null
    C15: boolean | null
    C16: boolean | null
    C17: boolean | null
    C18: boolean | null
    C19: boolean | null
    C20: boolean | null
    C21: boolean | null
    C22: boolean | null
    C23: boolean | null
    C24: boolean | null
    C25: boolean | null
    C26: boolean | null
    C27: boolean | null
    C28: boolean | null
    C29: boolean | null
    C30: boolean | null
    C31: boolean | null
    C32: boolean | null
    C33: boolean | null
    C34: boolean | null
    C35: boolean | null
    C36: boolean | null
    C37: boolean | null
    C38: boolean | null
    C41: boolean | null
    C42: boolean | null
    C47: boolean | null
    C48: boolean | null
    C49: boolean | null
    C50: boolean | null
    C51: boolean | null
    C52: boolean | null
    C58: boolean | null
    C59: boolean | null
    C60: boolean | null
    C75: boolean | null
    C76: boolean | null
    C77: boolean | null
    C80: boolean | null
    C81: boolean | null
    C82: boolean | null
    remainder: boolean | null
    correctAns: number | null
    totalAns: number | null
    createdAt: Date | null
  }

  export type TaskResultMaxAggregateOutputType = {
    id: number | null
    userClass: number | null
    lang: boolean | null
    math: boolean | null
    C1: boolean | null
    C2: boolean | null
    C3: boolean | null
    C4: boolean | null
    C5: boolean | null
    C6: boolean | null
    C7: boolean | null
    C8: boolean | null
    C9: boolean | null
    C10: boolean | null
    C11: boolean | null
    C12: boolean | null
    C13: boolean | null
    C14: boolean | null
    C15: boolean | null
    C16: boolean | null
    C17: boolean | null
    C18: boolean | null
    C19: boolean | null
    C20: boolean | null
    C21: boolean | null
    C22: boolean | null
    C23: boolean | null
    C24: boolean | null
    C25: boolean | null
    C26: boolean | null
    C27: boolean | null
    C28: boolean | null
    C29: boolean | null
    C30: boolean | null
    C31: boolean | null
    C32: boolean | null
    C33: boolean | null
    C34: boolean | null
    C35: boolean | null
    C36: boolean | null
    C37: boolean | null
    C38: boolean | null
    C41: boolean | null
    C42: boolean | null
    C47: boolean | null
    C48: boolean | null
    C49: boolean | null
    C50: boolean | null
    C51: boolean | null
    C52: boolean | null
    C58: boolean | null
    C59: boolean | null
    C60: boolean | null
    C75: boolean | null
    C76: boolean | null
    C77: boolean | null
    C80: boolean | null
    C81: boolean | null
    C82: boolean | null
    remainder: boolean | null
    correctAns: number | null
    totalAns: number | null
    createdAt: Date | null
  }

  export type TaskResultCountAggregateOutputType = {
    id: number
    userClass: number
    lang: number
    math: number
    C1: number
    C2: number
    C3: number
    C4: number
    C5: number
    C6: number
    C7: number
    C8: number
    C9: number
    C10: number
    C11: number
    C12: number
    C13: number
    C14: number
    C15: number
    C16: number
    C17: number
    C18: number
    C19: number
    C20: number
    C21: number
    C22: number
    C23: number
    C24: number
    C25: number
    C26: number
    C27: number
    C28: number
    C29: number
    C30: number
    C31: number
    C32: number
    C33: number
    C34: number
    C35: number
    C36: number
    C37: number
    C38: number
    C41: number
    C42: number
    C47: number
    C48: number
    C49: number
    C50: number
    C51: number
    C52: number
    C58: number
    C59: number
    C60: number
    C75: number
    C76: number
    C77: number
    C80: number
    C81: number
    C82: number
    remainder: number
    multTableSelection: number
    correctAns: number
    totalAns: number
    createdAt: number
    _all: number
  }


  export type TaskResultAvgAggregateInputType = {
    id?: true
    userClass?: true
    correctAns?: true
    totalAns?: true
  }

  export type TaskResultSumAggregateInputType = {
    id?: true
    userClass?: true
    correctAns?: true
    totalAns?: true
  }

  export type TaskResultMinAggregateInputType = {
    id?: true
    userClass?: true
    lang?: true
    math?: true
    C1?: true
    C2?: true
    C3?: true
    C4?: true
    C5?: true
    C6?: true
    C7?: true
    C8?: true
    C9?: true
    C10?: true
    C11?: true
    C12?: true
    C13?: true
    C14?: true
    C15?: true
    C16?: true
    C17?: true
    C18?: true
    C19?: true
    C20?: true
    C21?: true
    C22?: true
    C23?: true
    C24?: true
    C25?: true
    C26?: true
    C27?: true
    C28?: true
    C29?: true
    C30?: true
    C31?: true
    C32?: true
    C33?: true
    C34?: true
    C35?: true
    C36?: true
    C37?: true
    C38?: true
    C41?: true
    C42?: true
    C47?: true
    C48?: true
    C49?: true
    C50?: true
    C51?: true
    C52?: true
    C58?: true
    C59?: true
    C60?: true
    C75?: true
    C76?: true
    C77?: true
    C80?: true
    C81?: true
    C82?: true
    remainder?: true
    correctAns?: true
    totalAns?: true
    createdAt?: true
  }

  export type TaskResultMaxAggregateInputType = {
    id?: true
    userClass?: true
    lang?: true
    math?: true
    C1?: true
    C2?: true
    C3?: true
    C4?: true
    C5?: true
    C6?: true
    C7?: true
    C8?: true
    C9?: true
    C10?: true
    C11?: true
    C12?: true
    C13?: true
    C14?: true
    C15?: true
    C16?: true
    C17?: true
    C18?: true
    C19?: true
    C20?: true
    C21?: true
    C22?: true
    C23?: true
    C24?: true
    C25?: true
    C26?: true
    C27?: true
    C28?: true
    C29?: true
    C30?: true
    C31?: true
    C32?: true
    C33?: true
    C34?: true
    C35?: true
    C36?: true
    C37?: true
    C38?: true
    C41?: true
    C42?: true
    C47?: true
    C48?: true
    C49?: true
    C50?: true
    C51?: true
    C52?: true
    C58?: true
    C59?: true
    C60?: true
    C75?: true
    C76?: true
    C77?: true
    C80?: true
    C81?: true
    C82?: true
    remainder?: true
    correctAns?: true
    totalAns?: true
    createdAt?: true
  }

  export type TaskResultCountAggregateInputType = {
    id?: true
    userClass?: true
    lang?: true
    math?: true
    C1?: true
    C2?: true
    C3?: true
    C4?: true
    C5?: true
    C6?: true
    C7?: true
    C8?: true
    C9?: true
    C10?: true
    C11?: true
    C12?: true
    C13?: true
    C14?: true
    C15?: true
    C16?: true
    C17?: true
    C18?: true
    C19?: true
    C20?: true
    C21?: true
    C22?: true
    C23?: true
    C24?: true
    C25?: true
    C26?: true
    C27?: true
    C28?: true
    C29?: true
    C30?: true
    C31?: true
    C32?: true
    C33?: true
    C34?: true
    C35?: true
    C36?: true
    C37?: true
    C38?: true
    C41?: true
    C42?: true
    C47?: true
    C48?: true
    C49?: true
    C50?: true
    C51?: true
    C52?: true
    C58?: true
    C59?: true
    C60?: true
    C75?: true
    C76?: true
    C77?: true
    C80?: true
    C81?: true
    C82?: true
    remainder?: true
    multTableSelection?: true
    correctAns?: true
    totalAns?: true
    createdAt?: true
    _all?: true
  }

  export type TaskResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskResult to aggregate.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskResults
    **/
    _count?: true | TaskResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskResultMaxAggregateInputType
  }

  export type GetTaskResultAggregateType<T extends TaskResultAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskResult[P]>
      : GetScalarType<T[P], AggregateTaskResult[P]>
  }




  export type TaskResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskResultWhereInput
    orderBy?: TaskResultOrderByWithAggregationInput | TaskResultOrderByWithAggregationInput[]
    by: TaskResultScalarFieldEnum[] | TaskResultScalarFieldEnum
    having?: TaskResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskResultCountAggregateInputType | true
    _avg?: TaskResultAvgAggregateInputType
    _sum?: TaskResultSumAggregateInputType
    _min?: TaskResultMinAggregateInputType
    _max?: TaskResultMaxAggregateInputType
  }

  export type TaskResultGroupByOutputType = {
    id: number
    userClass: number
    lang: boolean
    math: boolean
    C1: boolean
    C2: boolean
    C3: boolean
    C4: boolean
    C5: boolean
    C6: boolean
    C7: boolean
    C8: boolean
    C9: boolean
    C10: boolean
    C11: boolean
    C12: boolean
    C13: boolean
    C14: boolean
    C15: boolean
    C16: boolean
    C17: boolean
    C18: boolean
    C19: boolean
    C20: boolean
    C21: boolean
    C22: boolean
    C23: boolean
    C24: boolean
    C25: boolean
    C26: boolean
    C27: boolean
    C28: boolean
    C29: boolean
    C30: boolean
    C31: boolean
    C32: boolean
    C33: boolean
    C34: boolean
    C35: boolean
    C36: boolean
    C37: boolean
    C38: boolean
    C41: boolean
    C42: boolean
    C47: boolean
    C48: boolean
    C49: boolean
    C50: boolean
    C51: boolean
    C52: boolean
    C58: boolean
    C59: boolean
    C60: boolean
    C75: boolean
    C76: boolean
    C77: boolean
    C80: boolean
    C81: boolean
    C82: boolean
    remainder: boolean
    multTableSelection: JsonValue
    correctAns: number
    totalAns: number
    createdAt: Date
    _count: TaskResultCountAggregateOutputType | null
    _avg: TaskResultAvgAggregateOutputType | null
    _sum: TaskResultSumAggregateOutputType | null
    _min: TaskResultMinAggregateOutputType | null
    _max: TaskResultMaxAggregateOutputType | null
  }

  type GetTaskResultGroupByPayload<T extends TaskResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskResultGroupByOutputType[P]>
            : GetScalarType<T[P], TaskResultGroupByOutputType[P]>
        }
      >
    >


  export type TaskResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userClass?: boolean
    lang?: boolean
    math?: boolean
    C1?: boolean
    C2?: boolean
    C3?: boolean
    C4?: boolean
    C5?: boolean
    C6?: boolean
    C7?: boolean
    C8?: boolean
    C9?: boolean
    C10?: boolean
    C11?: boolean
    C12?: boolean
    C13?: boolean
    C14?: boolean
    C15?: boolean
    C16?: boolean
    C17?: boolean
    C18?: boolean
    C19?: boolean
    C20?: boolean
    C21?: boolean
    C22?: boolean
    C23?: boolean
    C24?: boolean
    C25?: boolean
    C26?: boolean
    C27?: boolean
    C28?: boolean
    C29?: boolean
    C30?: boolean
    C31?: boolean
    C32?: boolean
    C33?: boolean
    C34?: boolean
    C35?: boolean
    C36?: boolean
    C37?: boolean
    C38?: boolean
    C41?: boolean
    C42?: boolean
    C47?: boolean
    C48?: boolean
    C49?: boolean
    C50?: boolean
    C51?: boolean
    C52?: boolean
    C58?: boolean
    C59?: boolean
    C60?: boolean
    C75?: boolean
    C76?: boolean
    C77?: boolean
    C80?: boolean
    C81?: boolean
    C82?: boolean
    remainder?: boolean
    multTableSelection?: boolean
    correctAns?: boolean
    totalAns?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["taskResult"]>

  export type TaskResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userClass?: boolean
    lang?: boolean
    math?: boolean
    C1?: boolean
    C2?: boolean
    C3?: boolean
    C4?: boolean
    C5?: boolean
    C6?: boolean
    C7?: boolean
    C8?: boolean
    C9?: boolean
    C10?: boolean
    C11?: boolean
    C12?: boolean
    C13?: boolean
    C14?: boolean
    C15?: boolean
    C16?: boolean
    C17?: boolean
    C18?: boolean
    C19?: boolean
    C20?: boolean
    C21?: boolean
    C22?: boolean
    C23?: boolean
    C24?: boolean
    C25?: boolean
    C26?: boolean
    C27?: boolean
    C28?: boolean
    C29?: boolean
    C30?: boolean
    C31?: boolean
    C32?: boolean
    C33?: boolean
    C34?: boolean
    C35?: boolean
    C36?: boolean
    C37?: boolean
    C38?: boolean
    C41?: boolean
    C42?: boolean
    C47?: boolean
    C48?: boolean
    C49?: boolean
    C50?: boolean
    C51?: boolean
    C52?: boolean
    C58?: boolean
    C59?: boolean
    C60?: boolean
    C75?: boolean
    C76?: boolean
    C77?: boolean
    C80?: boolean
    C81?: boolean
    C82?: boolean
    remainder?: boolean
    multTableSelection?: boolean
    correctAns?: boolean
    totalAns?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["taskResult"]>

  export type TaskResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userClass?: boolean
    lang?: boolean
    math?: boolean
    C1?: boolean
    C2?: boolean
    C3?: boolean
    C4?: boolean
    C5?: boolean
    C6?: boolean
    C7?: boolean
    C8?: boolean
    C9?: boolean
    C10?: boolean
    C11?: boolean
    C12?: boolean
    C13?: boolean
    C14?: boolean
    C15?: boolean
    C16?: boolean
    C17?: boolean
    C18?: boolean
    C19?: boolean
    C20?: boolean
    C21?: boolean
    C22?: boolean
    C23?: boolean
    C24?: boolean
    C25?: boolean
    C26?: boolean
    C27?: boolean
    C28?: boolean
    C29?: boolean
    C30?: boolean
    C31?: boolean
    C32?: boolean
    C33?: boolean
    C34?: boolean
    C35?: boolean
    C36?: boolean
    C37?: boolean
    C38?: boolean
    C41?: boolean
    C42?: boolean
    C47?: boolean
    C48?: boolean
    C49?: boolean
    C50?: boolean
    C51?: boolean
    C52?: boolean
    C58?: boolean
    C59?: boolean
    C60?: boolean
    C75?: boolean
    C76?: boolean
    C77?: boolean
    C80?: boolean
    C81?: boolean
    C82?: boolean
    remainder?: boolean
    multTableSelection?: boolean
    correctAns?: boolean
    totalAns?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["taskResult"]>

  export type TaskResultSelectScalar = {
    id?: boolean
    userClass?: boolean
    lang?: boolean
    math?: boolean
    C1?: boolean
    C2?: boolean
    C3?: boolean
    C4?: boolean
    C5?: boolean
    C6?: boolean
    C7?: boolean
    C8?: boolean
    C9?: boolean
    C10?: boolean
    C11?: boolean
    C12?: boolean
    C13?: boolean
    C14?: boolean
    C15?: boolean
    C16?: boolean
    C17?: boolean
    C18?: boolean
    C19?: boolean
    C20?: boolean
    C21?: boolean
    C22?: boolean
    C23?: boolean
    C24?: boolean
    C25?: boolean
    C26?: boolean
    C27?: boolean
    C28?: boolean
    C29?: boolean
    C30?: boolean
    C31?: boolean
    C32?: boolean
    C33?: boolean
    C34?: boolean
    C35?: boolean
    C36?: boolean
    C37?: boolean
    C38?: boolean
    C41?: boolean
    C42?: boolean
    C47?: boolean
    C48?: boolean
    C49?: boolean
    C50?: boolean
    C51?: boolean
    C52?: boolean
    C58?: boolean
    C59?: boolean
    C60?: boolean
    C75?: boolean
    C76?: boolean
    C77?: boolean
    C80?: boolean
    C81?: boolean
    C82?: boolean
    remainder?: boolean
    multTableSelection?: boolean
    correctAns?: boolean
    totalAns?: boolean
    createdAt?: boolean
  }

  export type TaskResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userClass" | "lang" | "math" | "C1" | "C2" | "C3" | "C4" | "C5" | "C6" | "C7" | "C8" | "C9" | "C10" | "C11" | "C12" | "C13" | "C14" | "C15" | "C16" | "C17" | "C18" | "C19" | "C20" | "C21" | "C22" | "C23" | "C24" | "C25" | "C26" | "C27" | "C28" | "C29" | "C30" | "C31" | "C32" | "C33" | "C34" | "C35" | "C36" | "C37" | "C38" | "C41" | "C42" | "C47" | "C48" | "C49" | "C50" | "C51" | "C52" | "C58" | "C59" | "C60" | "C75" | "C76" | "C77" | "C80" | "C81" | "C82" | "remainder" | "multTableSelection" | "correctAns" | "totalAns" | "createdAt", ExtArgs["result"]["taskResult"]>

  export type $TaskResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskResult"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userClass: number
      lang: boolean
      math: boolean
      C1: boolean
      C2: boolean
      C3: boolean
      C4: boolean
      C5: boolean
      C6: boolean
      C7: boolean
      C8: boolean
      C9: boolean
      C10: boolean
      C11: boolean
      C12: boolean
      C13: boolean
      C14: boolean
      C15: boolean
      C16: boolean
      C17: boolean
      C18: boolean
      C19: boolean
      C20: boolean
      C21: boolean
      C22: boolean
      C23: boolean
      C24: boolean
      C25: boolean
      C26: boolean
      C27: boolean
      C28: boolean
      C29: boolean
      C30: boolean
      C31: boolean
      C32: boolean
      C33: boolean
      C34: boolean
      C35: boolean
      C36: boolean
      C37: boolean
      C38: boolean
      C41: boolean
      C42: boolean
      C47: boolean
      C48: boolean
      C49: boolean
      C50: boolean
      C51: boolean
      C52: boolean
      C58: boolean
      C59: boolean
      C60: boolean
      C75: boolean
      C76: boolean
      C77: boolean
      C80: boolean
      C81: boolean
      C82: boolean
      remainder: boolean
      multTableSelection: Prisma.JsonValue
      correctAns: number
      totalAns: number
      createdAt: Date
    }, ExtArgs["result"]["taskResult"]>
    composites: {}
  }

  type TaskResultGetPayload<S extends boolean | null | undefined | TaskResultDefaultArgs> = $Result.GetResult<Prisma.$TaskResultPayload, S>

  type TaskResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskResultCountAggregateInputType | true
    }

  export interface TaskResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskResult'], meta: { name: 'TaskResult' } }
    /**
     * Find zero or one TaskResult that matches the filter.
     * @param {TaskResultFindUniqueArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskResultFindUniqueArgs>(args: SelectSubset<T, TaskResultFindUniqueArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskResultFindUniqueOrThrowArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskResultFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultFindFirstArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskResultFindFirstArgs>(args?: SelectSubset<T, TaskResultFindFirstArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultFindFirstOrThrowArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskResultFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskResults
     * const taskResults = await prisma.taskResult.findMany()
     * 
     * // Get first 10 TaskResults
     * const taskResults = await prisma.taskResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskResultWithIdOnly = await prisma.taskResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskResultFindManyArgs>(args?: SelectSubset<T, TaskResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskResult.
     * @param {TaskResultCreateArgs} args - Arguments to create a TaskResult.
     * @example
     * // Create one TaskResult
     * const TaskResult = await prisma.taskResult.create({
     *   data: {
     *     // ... data to create a TaskResult
     *   }
     * })
     * 
     */
    create<T extends TaskResultCreateArgs>(args: SelectSubset<T, TaskResultCreateArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskResults.
     * @param {TaskResultCreateManyArgs} args - Arguments to create many TaskResults.
     * @example
     * // Create many TaskResults
     * const taskResult = await prisma.taskResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskResultCreateManyArgs>(args?: SelectSubset<T, TaskResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskResults and returns the data saved in the database.
     * @param {TaskResultCreateManyAndReturnArgs} args - Arguments to create many TaskResults.
     * @example
     * // Create many TaskResults
     * const taskResult = await prisma.taskResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskResults and only return the `id`
     * const taskResultWithIdOnly = await prisma.taskResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskResultCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskResult.
     * @param {TaskResultDeleteArgs} args - Arguments to delete one TaskResult.
     * @example
     * // Delete one TaskResult
     * const TaskResult = await prisma.taskResult.delete({
     *   where: {
     *     // ... filter to delete one TaskResult
     *   }
     * })
     * 
     */
    delete<T extends TaskResultDeleteArgs>(args: SelectSubset<T, TaskResultDeleteArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskResult.
     * @param {TaskResultUpdateArgs} args - Arguments to update one TaskResult.
     * @example
     * // Update one TaskResult
     * const taskResult = await prisma.taskResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskResultUpdateArgs>(args: SelectSubset<T, TaskResultUpdateArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskResults.
     * @param {TaskResultDeleteManyArgs} args - Arguments to filter TaskResults to delete.
     * @example
     * // Delete a few TaskResults
     * const { count } = await prisma.taskResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskResultDeleteManyArgs>(args?: SelectSubset<T, TaskResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskResults
     * const taskResult = await prisma.taskResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskResultUpdateManyArgs>(args: SelectSubset<T, TaskResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskResults and returns the data updated in the database.
     * @param {TaskResultUpdateManyAndReturnArgs} args - Arguments to update many TaskResults.
     * @example
     * // Update many TaskResults
     * const taskResult = await prisma.taskResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskResults and only return the `id`
     * const taskResultWithIdOnly = await prisma.taskResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskResultUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskResult.
     * @param {TaskResultUpsertArgs} args - Arguments to update or create a TaskResult.
     * @example
     * // Update or create a TaskResult
     * const taskResult = await prisma.taskResult.upsert({
     *   create: {
     *     // ... data to create a TaskResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskResult we want to update
     *   }
     * })
     */
    upsert<T extends TaskResultUpsertArgs>(args: SelectSubset<T, TaskResultUpsertArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultCountArgs} args - Arguments to filter TaskResults to count.
     * @example
     * // Count the number of TaskResults
     * const count = await prisma.taskResult.count({
     *   where: {
     *     // ... the filter for the TaskResults we want to count
     *   }
     * })
    **/
    count<T extends TaskResultCountArgs>(
      args?: Subset<T, TaskResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskResultAggregateArgs>(args: Subset<T, TaskResultAggregateArgs>): Prisma.PrismaPromise<GetTaskResultAggregateType<T>>

    /**
     * Group by TaskResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskResultGroupByArgs['orderBy'] }
        : { orderBy?: TaskResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskResult model
   */
  readonly fields: TaskResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskResult model
   */
  interface TaskResultFieldRefs {
    readonly id: FieldRef<"TaskResult", 'Int'>
    readonly userClass: FieldRef<"TaskResult", 'Int'>
    readonly lang: FieldRef<"TaskResult", 'Boolean'>
    readonly math: FieldRef<"TaskResult", 'Boolean'>
    readonly C1: FieldRef<"TaskResult", 'Boolean'>
    readonly C2: FieldRef<"TaskResult", 'Boolean'>
    readonly C3: FieldRef<"TaskResult", 'Boolean'>
    readonly C4: FieldRef<"TaskResult", 'Boolean'>
    readonly C5: FieldRef<"TaskResult", 'Boolean'>
    readonly C6: FieldRef<"TaskResult", 'Boolean'>
    readonly C7: FieldRef<"TaskResult", 'Boolean'>
    readonly C8: FieldRef<"TaskResult", 'Boolean'>
    readonly C9: FieldRef<"TaskResult", 'Boolean'>
    readonly C10: FieldRef<"TaskResult", 'Boolean'>
    readonly C11: FieldRef<"TaskResult", 'Boolean'>
    readonly C12: FieldRef<"TaskResult", 'Boolean'>
    readonly C13: FieldRef<"TaskResult", 'Boolean'>
    readonly C14: FieldRef<"TaskResult", 'Boolean'>
    readonly C15: FieldRef<"TaskResult", 'Boolean'>
    readonly C16: FieldRef<"TaskResult", 'Boolean'>
    readonly C17: FieldRef<"TaskResult", 'Boolean'>
    readonly C18: FieldRef<"TaskResult", 'Boolean'>
    readonly C19: FieldRef<"TaskResult", 'Boolean'>
    readonly C20: FieldRef<"TaskResult", 'Boolean'>
    readonly C21: FieldRef<"TaskResult", 'Boolean'>
    readonly C22: FieldRef<"TaskResult", 'Boolean'>
    readonly C23: FieldRef<"TaskResult", 'Boolean'>
    readonly C24: FieldRef<"TaskResult", 'Boolean'>
    readonly C25: FieldRef<"TaskResult", 'Boolean'>
    readonly C26: FieldRef<"TaskResult", 'Boolean'>
    readonly C27: FieldRef<"TaskResult", 'Boolean'>
    readonly C28: FieldRef<"TaskResult", 'Boolean'>
    readonly C29: FieldRef<"TaskResult", 'Boolean'>
    readonly C30: FieldRef<"TaskResult", 'Boolean'>
    readonly C31: FieldRef<"TaskResult", 'Boolean'>
    readonly C32: FieldRef<"TaskResult", 'Boolean'>
    readonly C33: FieldRef<"TaskResult", 'Boolean'>
    readonly C34: FieldRef<"TaskResult", 'Boolean'>
    readonly C35: FieldRef<"TaskResult", 'Boolean'>
    readonly C36: FieldRef<"TaskResult", 'Boolean'>
    readonly C37: FieldRef<"TaskResult", 'Boolean'>
    readonly C38: FieldRef<"TaskResult", 'Boolean'>
    readonly C41: FieldRef<"TaskResult", 'Boolean'>
    readonly C42: FieldRef<"TaskResult", 'Boolean'>
    readonly C47: FieldRef<"TaskResult", 'Boolean'>
    readonly C48: FieldRef<"TaskResult", 'Boolean'>
    readonly C49: FieldRef<"TaskResult", 'Boolean'>
    readonly C50: FieldRef<"TaskResult", 'Boolean'>
    readonly C51: FieldRef<"TaskResult", 'Boolean'>
    readonly C52: FieldRef<"TaskResult", 'Boolean'>
    readonly C58: FieldRef<"TaskResult", 'Boolean'>
    readonly C59: FieldRef<"TaskResult", 'Boolean'>
    readonly C60: FieldRef<"TaskResult", 'Boolean'>
    readonly C75: FieldRef<"TaskResult", 'Boolean'>
    readonly C76: FieldRef<"TaskResult", 'Boolean'>
    readonly C77: FieldRef<"TaskResult", 'Boolean'>
    readonly C80: FieldRef<"TaskResult", 'Boolean'>
    readonly C81: FieldRef<"TaskResult", 'Boolean'>
    readonly C82: FieldRef<"TaskResult", 'Boolean'>
    readonly remainder: FieldRef<"TaskResult", 'Boolean'>
    readonly multTableSelection: FieldRef<"TaskResult", 'Json'>
    readonly correctAns: FieldRef<"TaskResult", 'Int'>
    readonly totalAns: FieldRef<"TaskResult", 'Int'>
    readonly createdAt: FieldRef<"TaskResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TaskResult findUnique
   */
  export type TaskResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult findUniqueOrThrow
   */
  export type TaskResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult findFirst
   */
  export type TaskResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskResults.
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskResults.
     */
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * TaskResult findFirstOrThrow
   */
  export type TaskResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskResults.
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskResults.
     */
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * TaskResult findMany
   */
  export type TaskResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Filter, which TaskResults to fetch.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskResults.
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * TaskResult create
   */
  export type TaskResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The data needed to create a TaskResult.
     */
    data: XOR<TaskResultCreateInput, TaskResultUncheckedCreateInput>
  }

  /**
   * TaskResult createMany
   */
  export type TaskResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskResults.
     */
    data: TaskResultCreateManyInput | TaskResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskResult createManyAndReturn
   */
  export type TaskResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The data used to create many TaskResults.
     */
    data: TaskResultCreateManyInput | TaskResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskResult update
   */
  export type TaskResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The data needed to update a TaskResult.
     */
    data: XOR<TaskResultUpdateInput, TaskResultUncheckedUpdateInput>
    /**
     * Choose, which TaskResult to update.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult updateMany
   */
  export type TaskResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskResults.
     */
    data: XOR<TaskResultUpdateManyMutationInput, TaskResultUncheckedUpdateManyInput>
    /**
     * Filter which TaskResults to update
     */
    where?: TaskResultWhereInput
    /**
     * Limit how many TaskResults to update.
     */
    limit?: number
  }

  /**
   * TaskResult updateManyAndReturn
   */
  export type TaskResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The data used to update TaskResults.
     */
    data: XOR<TaskResultUpdateManyMutationInput, TaskResultUncheckedUpdateManyInput>
    /**
     * Filter which TaskResults to update
     */
    where?: TaskResultWhereInput
    /**
     * Limit how many TaskResults to update.
     */
    limit?: number
  }

  /**
   * TaskResult upsert
   */
  export type TaskResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The filter to search for the TaskResult to update in case it exists.
     */
    where: TaskResultWhereUniqueInput
    /**
     * In case the TaskResult found by the `where` argument doesn't exist, create a new TaskResult with this data.
     */
    create: XOR<TaskResultCreateInput, TaskResultUncheckedCreateInput>
    /**
     * In case the TaskResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskResultUpdateInput, TaskResultUncheckedUpdateInput>
  }

  /**
   * TaskResult delete
   */
  export type TaskResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Filter which TaskResult to delete.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult deleteMany
   */
  export type TaskResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskResults to delete
     */
    where?: TaskResultWhereInput
    /**
     * Limit how many TaskResults to delete.
     */
    limit?: number
  }

  /**
   * TaskResult without action
   */
  export type TaskResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TaskResultScalarFieldEnum: {
    id: 'id',
    userClass: 'userClass',
    lang: 'lang',
    math: 'math',
    C1: 'C1',
    C2: 'C2',
    C3: 'C3',
    C4: 'C4',
    C5: 'C5',
    C6: 'C6',
    C7: 'C7',
    C8: 'C8',
    C9: 'C9',
    C10: 'C10',
    C11: 'C11',
    C12: 'C12',
    C13: 'C13',
    C14: 'C14',
    C15: 'C15',
    C16: 'C16',
    C17: 'C17',
    C18: 'C18',
    C19: 'C19',
    C20: 'C20',
    C21: 'C21',
    C22: 'C22',
    C23: 'C23',
    C24: 'C24',
    C25: 'C25',
    C26: 'C26',
    C27: 'C27',
    C28: 'C28',
    C29: 'C29',
    C30: 'C30',
    C31: 'C31',
    C32: 'C32',
    C33: 'C33',
    C34: 'C34',
    C35: 'C35',
    C36: 'C36',
    C37: 'C37',
    C38: 'C38',
    C41: 'C41',
    C42: 'C42',
    C47: 'C47',
    C48: 'C48',
    C49: 'C49',
    C50: 'C50',
    C51: 'C51',
    C52: 'C52',
    C58: 'C58',
    C59: 'C59',
    C60: 'C60',
    C75: 'C75',
    C76: 'C76',
    C77: 'C77',
    C80: 'C80',
    C81: 'C81',
    C82: 'C82',
    remainder: 'remainder',
    multTableSelection: 'multTableSelection',
    correctAns: 'correctAns',
    totalAns: 'totalAns',
    createdAt: 'createdAt'
  };

  export type TaskResultScalarFieldEnum = (typeof TaskResultScalarFieldEnum)[keyof typeof TaskResultScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TaskResultWhereInput = {
    AND?: TaskResultWhereInput | TaskResultWhereInput[]
    OR?: TaskResultWhereInput[]
    NOT?: TaskResultWhereInput | TaskResultWhereInput[]
    id?: IntFilter<"TaskResult"> | number
    userClass?: IntFilter<"TaskResult"> | number
    lang?: BoolFilter<"TaskResult"> | boolean
    math?: BoolFilter<"TaskResult"> | boolean
    C1?: BoolFilter<"TaskResult"> | boolean
    C2?: BoolFilter<"TaskResult"> | boolean
    C3?: BoolFilter<"TaskResult"> | boolean
    C4?: BoolFilter<"TaskResult"> | boolean
    C5?: BoolFilter<"TaskResult"> | boolean
    C6?: BoolFilter<"TaskResult"> | boolean
    C7?: BoolFilter<"TaskResult"> | boolean
    C8?: BoolFilter<"TaskResult"> | boolean
    C9?: BoolFilter<"TaskResult"> | boolean
    C10?: BoolFilter<"TaskResult"> | boolean
    C11?: BoolFilter<"TaskResult"> | boolean
    C12?: BoolFilter<"TaskResult"> | boolean
    C13?: BoolFilter<"TaskResult"> | boolean
    C14?: BoolFilter<"TaskResult"> | boolean
    C15?: BoolFilter<"TaskResult"> | boolean
    C16?: BoolFilter<"TaskResult"> | boolean
    C17?: BoolFilter<"TaskResult"> | boolean
    C18?: BoolFilter<"TaskResult"> | boolean
    C19?: BoolFilter<"TaskResult"> | boolean
    C20?: BoolFilter<"TaskResult"> | boolean
    C21?: BoolFilter<"TaskResult"> | boolean
    C22?: BoolFilter<"TaskResult"> | boolean
    C23?: BoolFilter<"TaskResult"> | boolean
    C24?: BoolFilter<"TaskResult"> | boolean
    C25?: BoolFilter<"TaskResult"> | boolean
    C26?: BoolFilter<"TaskResult"> | boolean
    C27?: BoolFilter<"TaskResult"> | boolean
    C28?: BoolFilter<"TaskResult"> | boolean
    C29?: BoolFilter<"TaskResult"> | boolean
    C30?: BoolFilter<"TaskResult"> | boolean
    C31?: BoolFilter<"TaskResult"> | boolean
    C32?: BoolFilter<"TaskResult"> | boolean
    C33?: BoolFilter<"TaskResult"> | boolean
    C34?: BoolFilter<"TaskResult"> | boolean
    C35?: BoolFilter<"TaskResult"> | boolean
    C36?: BoolFilter<"TaskResult"> | boolean
    C37?: BoolFilter<"TaskResult"> | boolean
    C38?: BoolFilter<"TaskResult"> | boolean
    C41?: BoolFilter<"TaskResult"> | boolean
    C42?: BoolFilter<"TaskResult"> | boolean
    C47?: BoolFilter<"TaskResult"> | boolean
    C48?: BoolFilter<"TaskResult"> | boolean
    C49?: BoolFilter<"TaskResult"> | boolean
    C50?: BoolFilter<"TaskResult"> | boolean
    C51?: BoolFilter<"TaskResult"> | boolean
    C52?: BoolFilter<"TaskResult"> | boolean
    C58?: BoolFilter<"TaskResult"> | boolean
    C59?: BoolFilter<"TaskResult"> | boolean
    C60?: BoolFilter<"TaskResult"> | boolean
    C75?: BoolFilter<"TaskResult"> | boolean
    C76?: BoolFilter<"TaskResult"> | boolean
    C77?: BoolFilter<"TaskResult"> | boolean
    C80?: BoolFilter<"TaskResult"> | boolean
    C81?: BoolFilter<"TaskResult"> | boolean
    C82?: BoolFilter<"TaskResult"> | boolean
    remainder?: BoolFilter<"TaskResult"> | boolean
    multTableSelection?: JsonFilter<"TaskResult">
    correctAns?: IntFilter<"TaskResult"> | number
    totalAns?: IntFilter<"TaskResult"> | number
    createdAt?: DateTimeFilter<"TaskResult"> | Date | string
  }

  export type TaskResultOrderByWithRelationInput = {
    id?: SortOrder
    userClass?: SortOrder
    lang?: SortOrder
    math?: SortOrder
    C1?: SortOrder
    C2?: SortOrder
    C3?: SortOrder
    C4?: SortOrder
    C5?: SortOrder
    C6?: SortOrder
    C7?: SortOrder
    C8?: SortOrder
    C9?: SortOrder
    C10?: SortOrder
    C11?: SortOrder
    C12?: SortOrder
    C13?: SortOrder
    C14?: SortOrder
    C15?: SortOrder
    C16?: SortOrder
    C17?: SortOrder
    C18?: SortOrder
    C19?: SortOrder
    C20?: SortOrder
    C21?: SortOrder
    C22?: SortOrder
    C23?: SortOrder
    C24?: SortOrder
    C25?: SortOrder
    C26?: SortOrder
    C27?: SortOrder
    C28?: SortOrder
    C29?: SortOrder
    C30?: SortOrder
    C31?: SortOrder
    C32?: SortOrder
    C33?: SortOrder
    C34?: SortOrder
    C35?: SortOrder
    C36?: SortOrder
    C37?: SortOrder
    C38?: SortOrder
    C41?: SortOrder
    C42?: SortOrder
    C47?: SortOrder
    C48?: SortOrder
    C49?: SortOrder
    C50?: SortOrder
    C51?: SortOrder
    C52?: SortOrder
    C58?: SortOrder
    C59?: SortOrder
    C60?: SortOrder
    C75?: SortOrder
    C76?: SortOrder
    C77?: SortOrder
    C80?: SortOrder
    C81?: SortOrder
    C82?: SortOrder
    remainder?: SortOrder
    multTableSelection?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskResultWhereInput | TaskResultWhereInput[]
    OR?: TaskResultWhereInput[]
    NOT?: TaskResultWhereInput | TaskResultWhereInput[]
    userClass?: IntFilter<"TaskResult"> | number
    lang?: BoolFilter<"TaskResult"> | boolean
    math?: BoolFilter<"TaskResult"> | boolean
    C1?: BoolFilter<"TaskResult"> | boolean
    C2?: BoolFilter<"TaskResult"> | boolean
    C3?: BoolFilter<"TaskResult"> | boolean
    C4?: BoolFilter<"TaskResult"> | boolean
    C5?: BoolFilter<"TaskResult"> | boolean
    C6?: BoolFilter<"TaskResult"> | boolean
    C7?: BoolFilter<"TaskResult"> | boolean
    C8?: BoolFilter<"TaskResult"> | boolean
    C9?: BoolFilter<"TaskResult"> | boolean
    C10?: BoolFilter<"TaskResult"> | boolean
    C11?: BoolFilter<"TaskResult"> | boolean
    C12?: BoolFilter<"TaskResult"> | boolean
    C13?: BoolFilter<"TaskResult"> | boolean
    C14?: BoolFilter<"TaskResult"> | boolean
    C15?: BoolFilter<"TaskResult"> | boolean
    C16?: BoolFilter<"TaskResult"> | boolean
    C17?: BoolFilter<"TaskResult"> | boolean
    C18?: BoolFilter<"TaskResult"> | boolean
    C19?: BoolFilter<"TaskResult"> | boolean
    C20?: BoolFilter<"TaskResult"> | boolean
    C21?: BoolFilter<"TaskResult"> | boolean
    C22?: BoolFilter<"TaskResult"> | boolean
    C23?: BoolFilter<"TaskResult"> | boolean
    C24?: BoolFilter<"TaskResult"> | boolean
    C25?: BoolFilter<"TaskResult"> | boolean
    C26?: BoolFilter<"TaskResult"> | boolean
    C27?: BoolFilter<"TaskResult"> | boolean
    C28?: BoolFilter<"TaskResult"> | boolean
    C29?: BoolFilter<"TaskResult"> | boolean
    C30?: BoolFilter<"TaskResult"> | boolean
    C31?: BoolFilter<"TaskResult"> | boolean
    C32?: BoolFilter<"TaskResult"> | boolean
    C33?: BoolFilter<"TaskResult"> | boolean
    C34?: BoolFilter<"TaskResult"> | boolean
    C35?: BoolFilter<"TaskResult"> | boolean
    C36?: BoolFilter<"TaskResult"> | boolean
    C37?: BoolFilter<"TaskResult"> | boolean
    C38?: BoolFilter<"TaskResult"> | boolean
    C41?: BoolFilter<"TaskResult"> | boolean
    C42?: BoolFilter<"TaskResult"> | boolean
    C47?: BoolFilter<"TaskResult"> | boolean
    C48?: BoolFilter<"TaskResult"> | boolean
    C49?: BoolFilter<"TaskResult"> | boolean
    C50?: BoolFilter<"TaskResult"> | boolean
    C51?: BoolFilter<"TaskResult"> | boolean
    C52?: BoolFilter<"TaskResult"> | boolean
    C58?: BoolFilter<"TaskResult"> | boolean
    C59?: BoolFilter<"TaskResult"> | boolean
    C60?: BoolFilter<"TaskResult"> | boolean
    C75?: BoolFilter<"TaskResult"> | boolean
    C76?: BoolFilter<"TaskResult"> | boolean
    C77?: BoolFilter<"TaskResult"> | boolean
    C80?: BoolFilter<"TaskResult"> | boolean
    C81?: BoolFilter<"TaskResult"> | boolean
    C82?: BoolFilter<"TaskResult"> | boolean
    remainder?: BoolFilter<"TaskResult"> | boolean
    multTableSelection?: JsonFilter<"TaskResult">
    correctAns?: IntFilter<"TaskResult"> | number
    totalAns?: IntFilter<"TaskResult"> | number
    createdAt?: DateTimeFilter<"TaskResult"> | Date | string
  }, "id">

  export type TaskResultOrderByWithAggregationInput = {
    id?: SortOrder
    userClass?: SortOrder
    lang?: SortOrder
    math?: SortOrder
    C1?: SortOrder
    C2?: SortOrder
    C3?: SortOrder
    C4?: SortOrder
    C5?: SortOrder
    C6?: SortOrder
    C7?: SortOrder
    C8?: SortOrder
    C9?: SortOrder
    C10?: SortOrder
    C11?: SortOrder
    C12?: SortOrder
    C13?: SortOrder
    C14?: SortOrder
    C15?: SortOrder
    C16?: SortOrder
    C17?: SortOrder
    C18?: SortOrder
    C19?: SortOrder
    C20?: SortOrder
    C21?: SortOrder
    C22?: SortOrder
    C23?: SortOrder
    C24?: SortOrder
    C25?: SortOrder
    C26?: SortOrder
    C27?: SortOrder
    C28?: SortOrder
    C29?: SortOrder
    C30?: SortOrder
    C31?: SortOrder
    C32?: SortOrder
    C33?: SortOrder
    C34?: SortOrder
    C35?: SortOrder
    C36?: SortOrder
    C37?: SortOrder
    C38?: SortOrder
    C41?: SortOrder
    C42?: SortOrder
    C47?: SortOrder
    C48?: SortOrder
    C49?: SortOrder
    C50?: SortOrder
    C51?: SortOrder
    C52?: SortOrder
    C58?: SortOrder
    C59?: SortOrder
    C60?: SortOrder
    C75?: SortOrder
    C76?: SortOrder
    C77?: SortOrder
    C80?: SortOrder
    C81?: SortOrder
    C82?: SortOrder
    remainder?: SortOrder
    multTableSelection?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
    createdAt?: SortOrder
    _count?: TaskResultCountOrderByAggregateInput
    _avg?: TaskResultAvgOrderByAggregateInput
    _max?: TaskResultMaxOrderByAggregateInput
    _min?: TaskResultMinOrderByAggregateInput
    _sum?: TaskResultSumOrderByAggregateInput
  }

  export type TaskResultScalarWhereWithAggregatesInput = {
    AND?: TaskResultScalarWhereWithAggregatesInput | TaskResultScalarWhereWithAggregatesInput[]
    OR?: TaskResultScalarWhereWithAggregatesInput[]
    NOT?: TaskResultScalarWhereWithAggregatesInput | TaskResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskResult"> | number
    userClass?: IntWithAggregatesFilter<"TaskResult"> | number
    lang?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    math?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C1?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C2?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C3?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C4?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C5?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C6?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C7?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C8?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C9?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C10?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C11?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C12?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C13?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C14?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C15?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C16?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C17?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C18?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C19?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C20?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C21?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C22?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C23?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C24?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C25?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C26?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C27?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C28?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C29?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C30?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C31?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C32?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C33?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C34?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C35?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C36?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C37?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C38?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C41?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C42?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C47?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C48?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C49?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C50?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C51?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C52?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C58?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C59?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C60?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C75?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C76?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C77?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C80?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C81?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    C82?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    remainder?: BoolWithAggregatesFilter<"TaskResult"> | boolean
    multTableSelection?: JsonWithAggregatesFilter<"TaskResult">
    correctAns?: IntWithAggregatesFilter<"TaskResult"> | number
    totalAns?: IntWithAggregatesFilter<"TaskResult"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TaskResult"> | Date | string
  }

  export type TaskResultCreateInput = {
    userClass: number
    lang: boolean
    math: boolean
    C1: boolean
    C2: boolean
    C3: boolean
    C4: boolean
    C5: boolean
    C6: boolean
    C7: boolean
    C8: boolean
    C9: boolean
    C10: boolean
    C11: boolean
    C12: boolean
    C13: boolean
    C14: boolean
    C15: boolean
    C16: boolean
    C17: boolean
    C18: boolean
    C19: boolean
    C20: boolean
    C21: boolean
    C22: boolean
    C23: boolean
    C24: boolean
    C25: boolean
    C26: boolean
    C27: boolean
    C28: boolean
    C29: boolean
    C30: boolean
    C31: boolean
    C32: boolean
    C33: boolean
    C34: boolean
    C35: boolean
    C36: boolean
    C37: boolean
    C38: boolean
    C41: boolean
    C42: boolean
    C47: boolean
    C48: boolean
    C49: boolean
    C50: boolean
    C51: boolean
    C52: boolean
    C58: boolean
    C59: boolean
    C60: boolean
    C75: boolean
    C76: boolean
    C77: boolean
    C80: boolean
    C81: boolean
    C82: boolean
    remainder: boolean
    multTableSelection: JsonNullValueInput | InputJsonValue
    correctAns: number
    totalAns: number
    createdAt?: Date | string
  }

  export type TaskResultUncheckedCreateInput = {
    id?: number
    userClass: number
    lang: boolean
    math: boolean
    C1: boolean
    C2: boolean
    C3: boolean
    C4: boolean
    C5: boolean
    C6: boolean
    C7: boolean
    C8: boolean
    C9: boolean
    C10: boolean
    C11: boolean
    C12: boolean
    C13: boolean
    C14: boolean
    C15: boolean
    C16: boolean
    C17: boolean
    C18: boolean
    C19: boolean
    C20: boolean
    C21: boolean
    C22: boolean
    C23: boolean
    C24: boolean
    C25: boolean
    C26: boolean
    C27: boolean
    C28: boolean
    C29: boolean
    C30: boolean
    C31: boolean
    C32: boolean
    C33: boolean
    C34: boolean
    C35: boolean
    C36: boolean
    C37: boolean
    C38: boolean
    C41: boolean
    C42: boolean
    C47: boolean
    C48: boolean
    C49: boolean
    C50: boolean
    C51: boolean
    C52: boolean
    C58: boolean
    C59: boolean
    C60: boolean
    C75: boolean
    C76: boolean
    C77: boolean
    C80: boolean
    C81: boolean
    C82: boolean
    remainder: boolean
    multTableSelection: JsonNullValueInput | InputJsonValue
    correctAns: number
    totalAns: number
    createdAt?: Date | string
  }

  export type TaskResultUpdateInput = {
    userClass?: IntFieldUpdateOperationsInput | number
    lang?: BoolFieldUpdateOperationsInput | boolean
    math?: BoolFieldUpdateOperationsInput | boolean
    C1?: BoolFieldUpdateOperationsInput | boolean
    C2?: BoolFieldUpdateOperationsInput | boolean
    C3?: BoolFieldUpdateOperationsInput | boolean
    C4?: BoolFieldUpdateOperationsInput | boolean
    C5?: BoolFieldUpdateOperationsInput | boolean
    C6?: BoolFieldUpdateOperationsInput | boolean
    C7?: BoolFieldUpdateOperationsInput | boolean
    C8?: BoolFieldUpdateOperationsInput | boolean
    C9?: BoolFieldUpdateOperationsInput | boolean
    C10?: BoolFieldUpdateOperationsInput | boolean
    C11?: BoolFieldUpdateOperationsInput | boolean
    C12?: BoolFieldUpdateOperationsInput | boolean
    C13?: BoolFieldUpdateOperationsInput | boolean
    C14?: BoolFieldUpdateOperationsInput | boolean
    C15?: BoolFieldUpdateOperationsInput | boolean
    C16?: BoolFieldUpdateOperationsInput | boolean
    C17?: BoolFieldUpdateOperationsInput | boolean
    C18?: BoolFieldUpdateOperationsInput | boolean
    C19?: BoolFieldUpdateOperationsInput | boolean
    C20?: BoolFieldUpdateOperationsInput | boolean
    C21?: BoolFieldUpdateOperationsInput | boolean
    C22?: BoolFieldUpdateOperationsInput | boolean
    C23?: BoolFieldUpdateOperationsInput | boolean
    C24?: BoolFieldUpdateOperationsInput | boolean
    C25?: BoolFieldUpdateOperationsInput | boolean
    C26?: BoolFieldUpdateOperationsInput | boolean
    C27?: BoolFieldUpdateOperationsInput | boolean
    C28?: BoolFieldUpdateOperationsInput | boolean
    C29?: BoolFieldUpdateOperationsInput | boolean
    C30?: BoolFieldUpdateOperationsInput | boolean
    C31?: BoolFieldUpdateOperationsInput | boolean
    C32?: BoolFieldUpdateOperationsInput | boolean
    C33?: BoolFieldUpdateOperationsInput | boolean
    C34?: BoolFieldUpdateOperationsInput | boolean
    C35?: BoolFieldUpdateOperationsInput | boolean
    C36?: BoolFieldUpdateOperationsInput | boolean
    C37?: BoolFieldUpdateOperationsInput | boolean
    C38?: BoolFieldUpdateOperationsInput | boolean
    C41?: BoolFieldUpdateOperationsInput | boolean
    C42?: BoolFieldUpdateOperationsInput | boolean
    C47?: BoolFieldUpdateOperationsInput | boolean
    C48?: BoolFieldUpdateOperationsInput | boolean
    C49?: BoolFieldUpdateOperationsInput | boolean
    C50?: BoolFieldUpdateOperationsInput | boolean
    C51?: BoolFieldUpdateOperationsInput | boolean
    C52?: BoolFieldUpdateOperationsInput | boolean
    C58?: BoolFieldUpdateOperationsInput | boolean
    C59?: BoolFieldUpdateOperationsInput | boolean
    C60?: BoolFieldUpdateOperationsInput | boolean
    C75?: BoolFieldUpdateOperationsInput | boolean
    C76?: BoolFieldUpdateOperationsInput | boolean
    C77?: BoolFieldUpdateOperationsInput | boolean
    C80?: BoolFieldUpdateOperationsInput | boolean
    C81?: BoolFieldUpdateOperationsInput | boolean
    C82?: BoolFieldUpdateOperationsInput | boolean
    remainder?: BoolFieldUpdateOperationsInput | boolean
    multTableSelection?: JsonNullValueInput | InputJsonValue
    correctAns?: IntFieldUpdateOperationsInput | number
    totalAns?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userClass?: IntFieldUpdateOperationsInput | number
    lang?: BoolFieldUpdateOperationsInput | boolean
    math?: BoolFieldUpdateOperationsInput | boolean
    C1?: BoolFieldUpdateOperationsInput | boolean
    C2?: BoolFieldUpdateOperationsInput | boolean
    C3?: BoolFieldUpdateOperationsInput | boolean
    C4?: BoolFieldUpdateOperationsInput | boolean
    C5?: BoolFieldUpdateOperationsInput | boolean
    C6?: BoolFieldUpdateOperationsInput | boolean
    C7?: BoolFieldUpdateOperationsInput | boolean
    C8?: BoolFieldUpdateOperationsInput | boolean
    C9?: BoolFieldUpdateOperationsInput | boolean
    C10?: BoolFieldUpdateOperationsInput | boolean
    C11?: BoolFieldUpdateOperationsInput | boolean
    C12?: BoolFieldUpdateOperationsInput | boolean
    C13?: BoolFieldUpdateOperationsInput | boolean
    C14?: BoolFieldUpdateOperationsInput | boolean
    C15?: BoolFieldUpdateOperationsInput | boolean
    C16?: BoolFieldUpdateOperationsInput | boolean
    C17?: BoolFieldUpdateOperationsInput | boolean
    C18?: BoolFieldUpdateOperationsInput | boolean
    C19?: BoolFieldUpdateOperationsInput | boolean
    C20?: BoolFieldUpdateOperationsInput | boolean
    C21?: BoolFieldUpdateOperationsInput | boolean
    C22?: BoolFieldUpdateOperationsInput | boolean
    C23?: BoolFieldUpdateOperationsInput | boolean
    C24?: BoolFieldUpdateOperationsInput | boolean
    C25?: BoolFieldUpdateOperationsInput | boolean
    C26?: BoolFieldUpdateOperationsInput | boolean
    C27?: BoolFieldUpdateOperationsInput | boolean
    C28?: BoolFieldUpdateOperationsInput | boolean
    C29?: BoolFieldUpdateOperationsInput | boolean
    C30?: BoolFieldUpdateOperationsInput | boolean
    C31?: BoolFieldUpdateOperationsInput | boolean
    C32?: BoolFieldUpdateOperationsInput | boolean
    C33?: BoolFieldUpdateOperationsInput | boolean
    C34?: BoolFieldUpdateOperationsInput | boolean
    C35?: BoolFieldUpdateOperationsInput | boolean
    C36?: BoolFieldUpdateOperationsInput | boolean
    C37?: BoolFieldUpdateOperationsInput | boolean
    C38?: BoolFieldUpdateOperationsInput | boolean
    C41?: BoolFieldUpdateOperationsInput | boolean
    C42?: BoolFieldUpdateOperationsInput | boolean
    C47?: BoolFieldUpdateOperationsInput | boolean
    C48?: BoolFieldUpdateOperationsInput | boolean
    C49?: BoolFieldUpdateOperationsInput | boolean
    C50?: BoolFieldUpdateOperationsInput | boolean
    C51?: BoolFieldUpdateOperationsInput | boolean
    C52?: BoolFieldUpdateOperationsInput | boolean
    C58?: BoolFieldUpdateOperationsInput | boolean
    C59?: BoolFieldUpdateOperationsInput | boolean
    C60?: BoolFieldUpdateOperationsInput | boolean
    C75?: BoolFieldUpdateOperationsInput | boolean
    C76?: BoolFieldUpdateOperationsInput | boolean
    C77?: BoolFieldUpdateOperationsInput | boolean
    C80?: BoolFieldUpdateOperationsInput | boolean
    C81?: BoolFieldUpdateOperationsInput | boolean
    C82?: BoolFieldUpdateOperationsInput | boolean
    remainder?: BoolFieldUpdateOperationsInput | boolean
    multTableSelection?: JsonNullValueInput | InputJsonValue
    correctAns?: IntFieldUpdateOperationsInput | number
    totalAns?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskResultCreateManyInput = {
    id?: number
    userClass: number
    lang: boolean
    math: boolean
    C1: boolean
    C2: boolean
    C3: boolean
    C4: boolean
    C5: boolean
    C6: boolean
    C7: boolean
    C8: boolean
    C9: boolean
    C10: boolean
    C11: boolean
    C12: boolean
    C13: boolean
    C14: boolean
    C15: boolean
    C16: boolean
    C17: boolean
    C18: boolean
    C19: boolean
    C20: boolean
    C21: boolean
    C22: boolean
    C23: boolean
    C24: boolean
    C25: boolean
    C26: boolean
    C27: boolean
    C28: boolean
    C29: boolean
    C30: boolean
    C31: boolean
    C32: boolean
    C33: boolean
    C34: boolean
    C35: boolean
    C36: boolean
    C37: boolean
    C38: boolean
    C41: boolean
    C42: boolean
    C47: boolean
    C48: boolean
    C49: boolean
    C50: boolean
    C51: boolean
    C52: boolean
    C58: boolean
    C59: boolean
    C60: boolean
    C75: boolean
    C76: boolean
    C77: boolean
    C80: boolean
    C81: boolean
    C82: boolean
    remainder: boolean
    multTableSelection: JsonNullValueInput | InputJsonValue
    correctAns: number
    totalAns: number
    createdAt?: Date | string
  }

  export type TaskResultUpdateManyMutationInput = {
    userClass?: IntFieldUpdateOperationsInput | number
    lang?: BoolFieldUpdateOperationsInput | boolean
    math?: BoolFieldUpdateOperationsInput | boolean
    C1?: BoolFieldUpdateOperationsInput | boolean
    C2?: BoolFieldUpdateOperationsInput | boolean
    C3?: BoolFieldUpdateOperationsInput | boolean
    C4?: BoolFieldUpdateOperationsInput | boolean
    C5?: BoolFieldUpdateOperationsInput | boolean
    C6?: BoolFieldUpdateOperationsInput | boolean
    C7?: BoolFieldUpdateOperationsInput | boolean
    C8?: BoolFieldUpdateOperationsInput | boolean
    C9?: BoolFieldUpdateOperationsInput | boolean
    C10?: BoolFieldUpdateOperationsInput | boolean
    C11?: BoolFieldUpdateOperationsInput | boolean
    C12?: BoolFieldUpdateOperationsInput | boolean
    C13?: BoolFieldUpdateOperationsInput | boolean
    C14?: BoolFieldUpdateOperationsInput | boolean
    C15?: BoolFieldUpdateOperationsInput | boolean
    C16?: BoolFieldUpdateOperationsInput | boolean
    C17?: BoolFieldUpdateOperationsInput | boolean
    C18?: BoolFieldUpdateOperationsInput | boolean
    C19?: BoolFieldUpdateOperationsInput | boolean
    C20?: BoolFieldUpdateOperationsInput | boolean
    C21?: BoolFieldUpdateOperationsInput | boolean
    C22?: BoolFieldUpdateOperationsInput | boolean
    C23?: BoolFieldUpdateOperationsInput | boolean
    C24?: BoolFieldUpdateOperationsInput | boolean
    C25?: BoolFieldUpdateOperationsInput | boolean
    C26?: BoolFieldUpdateOperationsInput | boolean
    C27?: BoolFieldUpdateOperationsInput | boolean
    C28?: BoolFieldUpdateOperationsInput | boolean
    C29?: BoolFieldUpdateOperationsInput | boolean
    C30?: BoolFieldUpdateOperationsInput | boolean
    C31?: BoolFieldUpdateOperationsInput | boolean
    C32?: BoolFieldUpdateOperationsInput | boolean
    C33?: BoolFieldUpdateOperationsInput | boolean
    C34?: BoolFieldUpdateOperationsInput | boolean
    C35?: BoolFieldUpdateOperationsInput | boolean
    C36?: BoolFieldUpdateOperationsInput | boolean
    C37?: BoolFieldUpdateOperationsInput | boolean
    C38?: BoolFieldUpdateOperationsInput | boolean
    C41?: BoolFieldUpdateOperationsInput | boolean
    C42?: BoolFieldUpdateOperationsInput | boolean
    C47?: BoolFieldUpdateOperationsInput | boolean
    C48?: BoolFieldUpdateOperationsInput | boolean
    C49?: BoolFieldUpdateOperationsInput | boolean
    C50?: BoolFieldUpdateOperationsInput | boolean
    C51?: BoolFieldUpdateOperationsInput | boolean
    C52?: BoolFieldUpdateOperationsInput | boolean
    C58?: BoolFieldUpdateOperationsInput | boolean
    C59?: BoolFieldUpdateOperationsInput | boolean
    C60?: BoolFieldUpdateOperationsInput | boolean
    C75?: BoolFieldUpdateOperationsInput | boolean
    C76?: BoolFieldUpdateOperationsInput | boolean
    C77?: BoolFieldUpdateOperationsInput | boolean
    C80?: BoolFieldUpdateOperationsInput | boolean
    C81?: BoolFieldUpdateOperationsInput | boolean
    C82?: BoolFieldUpdateOperationsInput | boolean
    remainder?: BoolFieldUpdateOperationsInput | boolean
    multTableSelection?: JsonNullValueInput | InputJsonValue
    correctAns?: IntFieldUpdateOperationsInput | number
    totalAns?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userClass?: IntFieldUpdateOperationsInput | number
    lang?: BoolFieldUpdateOperationsInput | boolean
    math?: BoolFieldUpdateOperationsInput | boolean
    C1?: BoolFieldUpdateOperationsInput | boolean
    C2?: BoolFieldUpdateOperationsInput | boolean
    C3?: BoolFieldUpdateOperationsInput | boolean
    C4?: BoolFieldUpdateOperationsInput | boolean
    C5?: BoolFieldUpdateOperationsInput | boolean
    C6?: BoolFieldUpdateOperationsInput | boolean
    C7?: BoolFieldUpdateOperationsInput | boolean
    C8?: BoolFieldUpdateOperationsInput | boolean
    C9?: BoolFieldUpdateOperationsInput | boolean
    C10?: BoolFieldUpdateOperationsInput | boolean
    C11?: BoolFieldUpdateOperationsInput | boolean
    C12?: BoolFieldUpdateOperationsInput | boolean
    C13?: BoolFieldUpdateOperationsInput | boolean
    C14?: BoolFieldUpdateOperationsInput | boolean
    C15?: BoolFieldUpdateOperationsInput | boolean
    C16?: BoolFieldUpdateOperationsInput | boolean
    C17?: BoolFieldUpdateOperationsInput | boolean
    C18?: BoolFieldUpdateOperationsInput | boolean
    C19?: BoolFieldUpdateOperationsInput | boolean
    C20?: BoolFieldUpdateOperationsInput | boolean
    C21?: BoolFieldUpdateOperationsInput | boolean
    C22?: BoolFieldUpdateOperationsInput | boolean
    C23?: BoolFieldUpdateOperationsInput | boolean
    C24?: BoolFieldUpdateOperationsInput | boolean
    C25?: BoolFieldUpdateOperationsInput | boolean
    C26?: BoolFieldUpdateOperationsInput | boolean
    C27?: BoolFieldUpdateOperationsInput | boolean
    C28?: BoolFieldUpdateOperationsInput | boolean
    C29?: BoolFieldUpdateOperationsInput | boolean
    C30?: BoolFieldUpdateOperationsInput | boolean
    C31?: BoolFieldUpdateOperationsInput | boolean
    C32?: BoolFieldUpdateOperationsInput | boolean
    C33?: BoolFieldUpdateOperationsInput | boolean
    C34?: BoolFieldUpdateOperationsInput | boolean
    C35?: BoolFieldUpdateOperationsInput | boolean
    C36?: BoolFieldUpdateOperationsInput | boolean
    C37?: BoolFieldUpdateOperationsInput | boolean
    C38?: BoolFieldUpdateOperationsInput | boolean
    C41?: BoolFieldUpdateOperationsInput | boolean
    C42?: BoolFieldUpdateOperationsInput | boolean
    C47?: BoolFieldUpdateOperationsInput | boolean
    C48?: BoolFieldUpdateOperationsInput | boolean
    C49?: BoolFieldUpdateOperationsInput | boolean
    C50?: BoolFieldUpdateOperationsInput | boolean
    C51?: BoolFieldUpdateOperationsInput | boolean
    C52?: BoolFieldUpdateOperationsInput | boolean
    C58?: BoolFieldUpdateOperationsInput | boolean
    C59?: BoolFieldUpdateOperationsInput | boolean
    C60?: BoolFieldUpdateOperationsInput | boolean
    C75?: BoolFieldUpdateOperationsInput | boolean
    C76?: BoolFieldUpdateOperationsInput | boolean
    C77?: BoolFieldUpdateOperationsInput | boolean
    C80?: BoolFieldUpdateOperationsInput | boolean
    C81?: BoolFieldUpdateOperationsInput | boolean
    C82?: BoolFieldUpdateOperationsInput | boolean
    remainder?: BoolFieldUpdateOperationsInput | boolean
    multTableSelection?: JsonNullValueInput | InputJsonValue
    correctAns?: IntFieldUpdateOperationsInput | number
    totalAns?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TaskResultCountOrderByAggregateInput = {
    id?: SortOrder
    userClass?: SortOrder
    lang?: SortOrder
    math?: SortOrder
    C1?: SortOrder
    C2?: SortOrder
    C3?: SortOrder
    C4?: SortOrder
    C5?: SortOrder
    C6?: SortOrder
    C7?: SortOrder
    C8?: SortOrder
    C9?: SortOrder
    C10?: SortOrder
    C11?: SortOrder
    C12?: SortOrder
    C13?: SortOrder
    C14?: SortOrder
    C15?: SortOrder
    C16?: SortOrder
    C17?: SortOrder
    C18?: SortOrder
    C19?: SortOrder
    C20?: SortOrder
    C21?: SortOrder
    C22?: SortOrder
    C23?: SortOrder
    C24?: SortOrder
    C25?: SortOrder
    C26?: SortOrder
    C27?: SortOrder
    C28?: SortOrder
    C29?: SortOrder
    C30?: SortOrder
    C31?: SortOrder
    C32?: SortOrder
    C33?: SortOrder
    C34?: SortOrder
    C35?: SortOrder
    C36?: SortOrder
    C37?: SortOrder
    C38?: SortOrder
    C41?: SortOrder
    C42?: SortOrder
    C47?: SortOrder
    C48?: SortOrder
    C49?: SortOrder
    C50?: SortOrder
    C51?: SortOrder
    C52?: SortOrder
    C58?: SortOrder
    C59?: SortOrder
    C60?: SortOrder
    C75?: SortOrder
    C76?: SortOrder
    C77?: SortOrder
    C80?: SortOrder
    C81?: SortOrder
    C82?: SortOrder
    remainder?: SortOrder
    multTableSelection?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskResultAvgOrderByAggregateInput = {
    id?: SortOrder
    userClass?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
  }

  export type TaskResultMaxOrderByAggregateInput = {
    id?: SortOrder
    userClass?: SortOrder
    lang?: SortOrder
    math?: SortOrder
    C1?: SortOrder
    C2?: SortOrder
    C3?: SortOrder
    C4?: SortOrder
    C5?: SortOrder
    C6?: SortOrder
    C7?: SortOrder
    C8?: SortOrder
    C9?: SortOrder
    C10?: SortOrder
    C11?: SortOrder
    C12?: SortOrder
    C13?: SortOrder
    C14?: SortOrder
    C15?: SortOrder
    C16?: SortOrder
    C17?: SortOrder
    C18?: SortOrder
    C19?: SortOrder
    C20?: SortOrder
    C21?: SortOrder
    C22?: SortOrder
    C23?: SortOrder
    C24?: SortOrder
    C25?: SortOrder
    C26?: SortOrder
    C27?: SortOrder
    C28?: SortOrder
    C29?: SortOrder
    C30?: SortOrder
    C31?: SortOrder
    C32?: SortOrder
    C33?: SortOrder
    C34?: SortOrder
    C35?: SortOrder
    C36?: SortOrder
    C37?: SortOrder
    C38?: SortOrder
    C41?: SortOrder
    C42?: SortOrder
    C47?: SortOrder
    C48?: SortOrder
    C49?: SortOrder
    C50?: SortOrder
    C51?: SortOrder
    C52?: SortOrder
    C58?: SortOrder
    C59?: SortOrder
    C60?: SortOrder
    C75?: SortOrder
    C76?: SortOrder
    C77?: SortOrder
    C80?: SortOrder
    C81?: SortOrder
    C82?: SortOrder
    remainder?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskResultMinOrderByAggregateInput = {
    id?: SortOrder
    userClass?: SortOrder
    lang?: SortOrder
    math?: SortOrder
    C1?: SortOrder
    C2?: SortOrder
    C3?: SortOrder
    C4?: SortOrder
    C5?: SortOrder
    C6?: SortOrder
    C7?: SortOrder
    C8?: SortOrder
    C9?: SortOrder
    C10?: SortOrder
    C11?: SortOrder
    C12?: SortOrder
    C13?: SortOrder
    C14?: SortOrder
    C15?: SortOrder
    C16?: SortOrder
    C17?: SortOrder
    C18?: SortOrder
    C19?: SortOrder
    C20?: SortOrder
    C21?: SortOrder
    C22?: SortOrder
    C23?: SortOrder
    C24?: SortOrder
    C25?: SortOrder
    C26?: SortOrder
    C27?: SortOrder
    C28?: SortOrder
    C29?: SortOrder
    C30?: SortOrder
    C31?: SortOrder
    C32?: SortOrder
    C33?: SortOrder
    C34?: SortOrder
    C35?: SortOrder
    C36?: SortOrder
    C37?: SortOrder
    C38?: SortOrder
    C41?: SortOrder
    C42?: SortOrder
    C47?: SortOrder
    C48?: SortOrder
    C49?: SortOrder
    C50?: SortOrder
    C51?: SortOrder
    C52?: SortOrder
    C58?: SortOrder
    C59?: SortOrder
    C60?: SortOrder
    C75?: SortOrder
    C76?: SortOrder
    C77?: SortOrder
    C80?: SortOrder
    C81?: SortOrder
    C82?: SortOrder
    remainder?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskResultSumOrderByAggregateInput = {
    id?: SortOrder
    userClass?: SortOrder
    correctAns?: SortOrder
    totalAns?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}